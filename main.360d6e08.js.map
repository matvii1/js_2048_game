{"version":3,"sources":["scripts/main.js"],"names":["score","document","querySelector","rows","querySelectorAll","startBtn","winMessage","loseMessage","gameScore","board","gameOver","count","forEach","row","indexOf","i","length","k","current","next","rotated","rotateClockWise","map","currentRotated","nextRotated","classList","remove","matrix","index","cell","j","rotateAntiClockWise","tableHtml","makeHtmlBoard","push","renderTable","currentCell","currentValue","innerHTML","className","add","moveLeft","toString","moveLeftForBoth","moveRight","boardBefore","noZeroRow","filter","nextCell","splice","amountOfNeededZeros","unshift","addOne","moveUp","moveDown","zerosArray","c","r","obj","randomNum","innerHtml","Math","floor","random","randomZeroCoords","x","y","round","addEventListener","hidden","event","contains","key"],"mappings":"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","file":"main.360d6e08.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst score = document.querySelector('.game-score');\nconst rows = document.querySelectorAll('.field-row');\nconst startBtn = document.querySelector('.start');\nconst winMessage = document.querySelector('.message-win');\nconst loseMessage = document.querySelector('.message-lose');\n\nlet gameScore = 0;\nlet board = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nfunction gameOver() {\n  let count = 0;\n\n  board.forEach(row => {\n    count += row.indexOf(0);\n  });\n  // if every row.indexOf(0) === -1, count would be -4;\n\n  if (count === -4) {\n    for (let i = 0; i < board.length; i++) {\n      for (let k = 0; k < board.length - 1; k++) {\n        const current = board[i][k];\n        const next = board[i][k + 1];\n  \n        const rotated = rotateClockWise(board.map(row => [...row]));\n        const currentRotated = rotated[i][k];\n        const nextRotated = rotated[i][k + 1];\n  \n        if (current === next) {\n          return;\n        }\n  \n        if (currentRotated === nextRotated) {\n          return;\n        }\n      }\n    }\n    loseMessage.classList.remove('hidden');\n  }\n}\n\nconst rotateClockWise = (matrix) => {\n  return matrix.map((row, index) => {\n    return row.map((cell, j) => matrix[matrix.length - 1 - j][index]);\n  });\n};\n\nconst rotateAntiClockWise = (matrix) => {\n  return matrix.map((row, index) => {\n    return row.map((cell, j) => matrix[j][matrix.length - 1 - index]);\n  });\n};\n\nconst tableHtml = [];\n\nfunction makeHtmlBoard() {  \n  rows.forEach(row => {\n    tableHtml.push([...row.querySelectorAll('td')]);\n  });\n};\nmakeHtmlBoard();\n\nfunction renderTable() {\n  for (let i = 0; i < board.length; i++) {\n    for (let k = 0; k < board.length; k++) {\n      const currentCell = tableHtml[i][k];\n      const currentValue = board[i][k];\n  \n      currentCell.innerHTML = currentValue === 0 ? '' : currentValue;\n      currentCell.className = '';\n      currentCell.classList.add('field-cell');\n      currentCell.classList.add(`field-cell--${currentValue}`);\n\n      if (currentCell.innerHTML === '2048') {\n        winMessage.classList.remove('hidden');\n      }\n    }\n  }\n  gameOver();\n}\nrenderTable();\n\nconst moveLeft = () => {\n  const boardBefore = board.toString();\n  moveLeftForBoth();\n\n  renderTable();\n  score.innerHTML = gameScore;\n};\n\nconst moveRight = () => {\n  const boardBefore = board.toString();\n  board = board.map(row => {\n    const noZeroRow = row.filter(cell => cell !== 0);\n\n    for (let i = 0; i < noZeroRow.length; i++) {\n      const currentCell = noZeroRow[i];\n      const nextCell = noZeroRow[i + 1];\n      \n      if (currentCell === nextCell) {\n        gameScore += currentCell + nextCell;\n        noZeroRow[i] += nextCell;\n        noZeroRow.splice(i + 1, 1);\n        // addOne();\n      }\n    };\n\n    const amountOfNeededZeros = 4 - noZeroRow.length;\n\n    for (let i = 0; i < amountOfNeededZeros; i++) {\n      noZeroRow.unshift(0);\n    }\n\n    return noZeroRow;\n  });\n  score.innerHTML = gameScore;\n  \n  renderTable();\n\n  if (board.toString() !== boardBefore) {\n    addOne();\n  }\n  // gameOver();\n};\n\nconst moveUp = () => {\n  board = rotateAntiClockWise(board);\n\n  moveLeftForBoth();\n\n  board = rotateClockWise(board);\n  score.innerHTML = gameScore;\n  renderTable();\n};\n\nconst moveDown = () => {\n  board = rotateClockWise(board);\n\n  moveLeftForBoth();\n\n  board = rotateAntiClockWise(board);\n  score.innerHTML = gameScore;\n  renderTable();\n};\n\n// циклы\n// const rotateClockWise = (matrix) => {\n//   const rotated = [];\n\n//   for (let i = 0; i <= matrix.length - 1; i++) {\n//     const column = [];\n\n//     for (let j = matrix.length - 1; j >= 0; j--) {\n//       column.push(matrix[j][i]);\n//     }\n\n//     rotated.push(column);\n//   };\n\n//   return rotated;\n// };\n\n// const rotateAntiClockWise = (matrix) => {\n//   const rotated = [];\n\n//   for (let i = matrix.length - 1; i >= 0; i--) {\n//     const column = [];\n\n//     for (let j = 0; j < matrix.length; j++) {\n//       column.push(matrix[j][i]);\n//     }\n\n//     rotated.push(column);\n//   };\n\n//   return rotated;\n// };\n// циклы\n\nfunction moveLeftForBoth() {\n  const boardBefore = board.toString();\n\n  board = board.map(row => {\n    const noZeroRow = row.filter(cell => cell !== 0);\n\n    for (let i = 0; i < noZeroRow.length; i++) {\n      const currentCell = noZeroRow[i];\n      const nextCell = noZeroRow[i + 1];\n      \n      if (currentCell === nextCell) {\n        gameScore += currentCell + nextCell;\n        noZeroRow[i] += nextCell;\n        noZeroRow.splice((i + 1), 1);\n      }\n    };\n\n    const amountOfNeededZeros = 4 - noZeroRow.length;\n    \n    for (let i = 0; i < amountOfNeededZeros; i++) {\n      noZeroRow.push(0);\n    }\n    \n    return noZeroRow;\n  });\n\n  if (board.toString() !== boardBefore) {\n    addOne();\n  };\n  gameOver();\n};\n\nfunction addOne() {\n  const zerosArray = [];\n\n  for (let c = 0; c < board.length; c++) {\n    for (let r = 0; r < board.length; r++) {\n      if (board[c][r] === 0) {\n        const obj = {};\n\n        obj['x'] = r;\n        obj['y'] = c;\n\n        zerosArray.push(obj);\n      }\n    }\n  }\n\n  const randomNum = Math.floor(Math.random() * zerosArray.length);\n  const randomZeroCoords = zerosArray[randomNum];\n  const x = randomZeroCoords['x'];\n  const y = randomZeroCoords['y'];\n\n  zerosArray.splice(randomNum, 1);\n\n  const randomForPrecentage = Math.round(Math.random() * 9) + 1;\n\n  let innerHtml;\n\n  if (randomForPrecentage === 1) {\n    innerHtml = 4;\n  } else {\n    innerHtml = 2;\n  }\n\n  tableHtml[y][x].innerHTML = innerHtml;\n  tableHtml[y][x].className = '';\n  tableHtml[y][x].classList.add('field-cell');\n  tableHtml[y][x].classList.add(`field-cell--${innerHtml}`);\n\n  board[y][x] = innerHtml;\n}\n\nstartBtn.addEventListener('click', () => {\n  gameScore = 0;\n  score.innerHTML = gameScore;\n\n  startBtn.classList.remove('start');\n  startBtn.classList.add('restart');\n  startBtn.innerHTML = 'Restart';\n\n  document.querySelector('.message-start').hidden = true;\n  document.querySelector('.message-lose').classList.add('hidden');\n\n  board = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  renderTable();\n\n  addOne();\n  addOne();\n});\n\ndocument.addEventListener('keydown', (event) => {\n if (winMessage.classList.contains('hidden') && loseMessage.classList.contains('hidden')) {\n    switch (event.key) {\n      case 'ArrowLeft':\n        moveLeft();\n        break;\n\n      case 'ArrowRight':\n        moveRight();\n        break;\n\n      case 'ArrowUp':\n        moveUp();\n        break;\n\n      case 'ArrowDown':\n        moveDown();\n        break;\n    }\n  }\n});\n"]}